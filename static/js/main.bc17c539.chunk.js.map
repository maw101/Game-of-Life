{"version":3,"sources":["components/GridCell.js","components/Grid.js","components/App.js","serviceWorker.js","index.js"],"names":["GridCell","props","column","row","cellSize","isActive","handleClickEvent","className","style","left","top","width","height","onClick","Grid","useState","gridSize","setGridSize","simulationRunning","setSimulationRunning","refreshInterval","setRefreshInterval","getCellCount","useCallback","makeEmptyGrid","newCellCount","grid","cellIdx","setGrid","coordsToCellIdx","cellIdxToCoords","Math","floor","isCellCoordActive","x","y","candidateCellIdx","getActiveNeighboursCount","cell","map","delta","filter","Boolean","length","runIteration","newGrid","activeNeighouringCells","useEffect","interval","setInterval","clearInterval","handleStopGame","Container","maxWidth","Box","sx","my","Stack","spacing","direction","justifyContent","alignItems","Button","variant","size","color","startIcon","ButtonGroup","random","mx","mt","mb","Slider","step","min","value","max","onChange","e","newSize","valueLabelDisplay","valueLabelFormat","position","oldGrid","handleCellToggle","darkTheme","createTheme","palette","mode","white","main","contrastText","App","ThemeProvider","theme","CssBaseline","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc17c539.chunk.js","sourcesContent":["import './css/GridCell.css';\n\nconst GridCell = (props) => {\n\n    const { column, row, cellSize, isActive, handleClickEvent } = props;\n\n    return (\n        <div \n            className={\n                isActive ? \"cell cell-active\" : \"cell cell-inactive\"\n            }\n            style={{\n                left: `${cellSize * column}px`,\n                top: `${cellSize * row}px`,\n                width: `${cellSize}px`,\n                height: `${cellSize}px`,\n            }}\n            onClick={handleClickEvent}\n        />\n    );\n\n};\n\nexport default GridCell;\n","import { \n    useCallback,\n    useEffect,\n    useState\n} from 'react';\n\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport Slider from '@mui/material/Slider';\n\nimport PlayCircleIcon from '@mui/icons-material/PlayCircle';\nimport StopCircleIcon from '@mui/icons-material/StopCircle';\nimport CasinoIcon from '@mui/icons-material/Casino';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\n\nimport './css/Grid.css';\nimport GridCell from './GridCell';\n\nconst Grid = () => {\n\n    const CELL_SIZE = 25;\n    const RUNNING_REFRESH_INTERVAL = 300;\n    const DEFAULT_GRID_SIZE = 25;\n\n    const [gridSize, setGridSize] = useState(DEFAULT_GRID_SIZE);\n\n    const [simulationRunning, setSimulationRunning] = useState(false);\n    const [refreshInterval, setRefreshInterval] = useState(0);\n\n    const getCellCount = useCallback(() => {\n        return gridSize ** 2;\n    }, [gridSize]);\n\n    const makeEmptyGrid = useCallback((newCellCount=getCellCount()) => {\n        const grid = [];\n\n        for (let cellIdx = 0; cellIdx < newCellCount; cellIdx++) {\n            grid[cellIdx] = false; // set to default value - inactive\n        }\n\n        return grid;\n    }, [getCellCount]);\n\n    const [grid, setGrid] = useState(makeEmptyGrid());\n\n    const coordsToCellIdx = useCallback((row, column) => {\n        return (column * gridSize) + row;\n    }, [gridSize]);\n\n    const cellIdxToCoords = useCallback((cellIdx) => {\n        return {\n            column: cellIdx % gridSize,\n            row: Math.floor(cellIdx / gridSize),\n        };\n    }, [gridSize]);\n\n    const isCellCoordActive = useCallback((x, y) => {\n        const candidateCellIdx = coordsToCellIdx(x, y);\n\n        return !(x === 0 && y === 0) && \n                (x >= 0 && x < gridSize) && \n                (y >= 0 && y < gridSize) &&\n                grid[candidateCellIdx];\n    }, [grid, gridSize, coordsToCellIdx]);\n\n    const getActiveNeighboursCount = useCallback((cellIdx) => {\n        const cell = cellIdxToCoords(cellIdx);\n\n        const coord_deltas = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n        const states = coord_deltas.map(\n            (delta) => isCellCoordActive(cell.column + delta[0], cell.row + delta[1])\n        );\n\n        return states.filter(Boolean).length;\n    }, [cellIdxToCoords, isCellCoordActive]);\n\n    const runIteration = useCallback(() => {\n        const newGrid = makeEmptyGrid();\n        \n        /*\n        Rules:\n        1. Any live cell with fewer than two live neighbors dies, as if caused by under population.\n        2. Any live cell with two or three live neighbors lives on to the next generation.\n        3. Any live cell with more than three live neighbors dies, as if by overpopulation.\n        4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n        */\n       \n        for (let cellIdx = 0; cellIdx < getCellCount(); cellIdx++) {\n            const activeNeighouringCells = getActiveNeighboursCount(cellIdx);\n\n            if (grid[cellIdx]) {\n                if (activeNeighouringCells === 2 || activeNeighouringCells === 3) {\n                    newGrid[cellIdx] = true;\n                } else {\n                    newGrid[cellIdx] = false;\n                }\n            } else if (!grid[cellIdx] && activeNeighouringCells === 3) {\n                newGrid[cellIdx] = true;\n            }\n        }\n        \n        setGrid(newGrid);\n    }, [grid, setGrid, getActiveNeighboursCount, getCellCount, makeEmptyGrid]);\n\n    useEffect(() => {\n        if (refreshInterval && refreshInterval > 0) {\n            const interval = setInterval(runIteration, refreshInterval);\n            return () => clearInterval(interval);\n        }\n    }, [refreshInterval, runIteration]);\n\n    const handleRunGame = () => {\n        setSimulationRunning(true);\n        setRefreshInterval(RUNNING_REFRESH_INTERVAL);\n        runIteration();\n    }\n\n    const handleStopGame = () => {\n        setSimulationRunning(false);\n        setRefreshInterval(0);\n    }\n\n    const handleCellToggle = (cellIdx) => {\n        if ((cellIdx >= 0) && (cellIdx <= getCellCount())) {\n            setGrid(oldGrid => {\n                const newGrid = [...oldGrid];\n                newGrid[cellIdx] = !newGrid[cellIdx];\n                return newGrid;\n            });\n        }\n    };\n\n    const handleGridRandomise = () => {\n        const newGrid = makeEmptyGrid();\n\n        for (let cellIdx = 0; cellIdx < getCellCount(); cellIdx++) {\n            // Make active with 0.5 probability.\n            if (Math.random() < 0.5) {\n                newGrid[cellIdx] = true;\n            } else {\n                newGrid[cellIdx] = false;\n            }\n        }\n\n        setGrid(newGrid);\n    };\n\n    const handleClearGrid = () => {\n        handleStopGame();\n\n        setGrid(makeEmptyGrid());\n    };\n\n    const handleSizeChange = (e, newSize) => {\n        handleStopGame();\n        \n        setGridSize(newSize);\n        setGrid(makeEmptyGrid(newSize ** 2));\n    };\n\n    return ( \n        <Container maxWidth={false}> \n            <Box sx={{ my: 2 }}>\n                <Stack spacing={2} direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n                    {\n                        simulationRunning ?\n                            <Button onClick={handleStopGame} variant=\"outlined\" size=\"large\" color=\"white\" startIcon={<StopCircleIcon />}>Stop Game</Button> :\n                            <Button onClick={handleRunGame} variant=\"outlined\" size=\"large\" color=\"white\" startIcon={<PlayCircleIcon />}>Run Game</Button>\n                    }\n                    <ButtonGroup variant=\"outlined\" size=\"large\" color=\"white\" aria-label=\"outlined white button group\">\n                        <Button onClick={handleGridRandomise} startIcon={<CasinoIcon />}>Randomise Grid</Button>\n                        <Button onClick={handleClearGrid} startIcon={<HighlightOffIcon />}>Clear Grid</Button>\n                    </ButtonGroup>\n                </Stack>\n                <Box sx={{\n                    mx: 'auto',\n                    mt: 7,\n                    mb: 1,\n                    width: \"50%\",\n                }}\n                >\n                    <Slider\n                        aria-label=\"Always visible\"\n                        step={5}\n                        min={5}\n                        value={gridSize}\n                        max={100}\n                        onChange={handleSizeChange}\n                        valueLabelDisplay=\"on\"\n                        valueLabelFormat={(value) => `Grid Size: ${value}`}\n                        color=\"white\"\n                    />\n                </Box>\n            </Box>\n            <Box \n                sx={{\n                    mx: \"auto\",\n                    my: 1,\n                    width: gridSize * CELL_SIZE,\n                    height: gridSize * CELL_SIZE,\n                    position: \"relative\"\n                }}\n            >\n                {\n                    grid.map((cell, cellIdx) => {\n                        const { column, row } = cellIdxToCoords(cellIdx);\n                        return (\n                            <GridCell\n                                column={column} row={row} cellSize={CELL_SIZE}\n                                isActive={cell}\n                                handleClickEvent={() => handleCellToggle(cellIdx)}\n                                key={`cell-${cellIdx}-${cell}`}\n                            />\n                        );\n                    })\n                }\n            </Box>\n        </Container>\n    );\n\n}\n\nexport default Grid;\n","import { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport './css/App.css';\n\nimport Grid from './Grid';\n\nconst darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n      white: {\n        main: '#fff',\n        contrastText: '#fff',\n      },\n    },\n  });\n\nconst App = () => {\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <CssBaseline />\n            <Grid />\n        </ThemeProvider>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}